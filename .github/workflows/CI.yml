name: CI

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1.46.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: go mod tidy

      - name: Verify dependencies
        run: go mod verify

      - name: Generate certificates for mTLS
        run: |
          # Step 1: Generate Certificate Authority
          # Create certificate files directory
          mkdir -p internal/certs/files
          cd internal/certs/files

          # Generate CA private key (4096-bit RSA)
          openssl genrsa -out ca.key 4096

          # Generate self-signed CA certificate (10-year validity)
          openssl req -new -x509 -key ca.key -sha256 -subj "/CN=Minexus CA/O=Minexus" -days 3650 -out ca.crt

          # Step 2: Generate Server Certificate
          # Create server certificate configuration
          cat > server.conf << EOF
          [req]
          distinguished_name = req_distinguished_name
          req_extensions = v3_req
          prompt = no

          [req_distinguished_name]
          CN = nexus
          O = Minexus

          [v3_req]
          keyUsage = keyEncipherment, dataEncipherment, digitalSignature
          extendedKeyUsage = serverAuth
          subjectAltName = @alt_names

          [alt_names]
          DNS.1 = nexus
          DNS.2 = localhost
          IP.1 = 127.0.0.1
          IP.2 = ::1
          EOF

          # Generate server private key
          openssl genrsa -out server.key 4096

          # Generate certificate signing request
          openssl req -new -key server.key -out server.csr -config server.conf

          # Sign with CA (10-year validity)
          openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial \
            -out server.crt -days 3650 -sha256 -extensions v3_req -extfile server.conf

          # Step 3: Generate Console Client Certificate
          # Create console certificate configuration
          cat > console.conf << EOF
          [req]
          distinguished_name = req_distinguished_name
          req_extensions = v3_req
          prompt = no

          [req_distinguished_name]
          CN = console
          O = Minexus

          [v3_req]
          keyUsage = keyEncipherment, dataEncipherment, digitalSignature
          extendedKeyUsage = clientAuth
          EOF

          # Generate console private key
          openssl genrsa -out console.key 4096

          # Generate certificate signing request
          openssl req -new -key console.key -out console.csr -config console.conf

          # Sign with CA (10-year validity)
          openssl x509 -req -in console.csr -CA ca.crt -CAkey ca.key -CAcreateserial \
            -out console.crt -days 3650 -sha256 -extensions v3_req -extfile console.conf

          # Certificate Verification
          # Verify server certificate against CA
          openssl verify -CAfile ca.crt server.crt

          # Verify console certificate against CA
          openssl verify -CAfile ca.crt console.crt

          # Return to root directory
          cd ../../..

      - name: Build all binaries
        run: |
          go build -v ./cmd/nexus
          go build -v ./cmd/minion
          go build -v ./cmd/console

      - name: Create test environment file
        run: |
          cat > .env << EOF
          NEXUS_SERVER=localhost
          NEXUS_MINION_PORT=11972
          NEXUS_CONSOLE_PORT=11973
          DBHOST=localhost
          DBPORT=5432
          DBUSER=postgres
          DBPASS=postgres
          DBNAME=minexus
          DBSSLMODE=disable
          MAX_MSG_SIZE=10485760
          FILEROOT=/tmp
          MINION_ID=minion-docker-01
          CONNECT_TIMEOUT=3
          INITIAL_RECONNECT_DELAY=1
          MAX_RECONNECT_DELAY=3600
          HEARTBEAT_INTERVAL=60
          DEBUG=false
          EOF

      - name: Run integration tests with Docker services
        run: |
          # Start required services
          docker compose up -d nexus_db
          sleep 15
          docker compose up -d nexus
          sleep 15

          # Run integration tests
          SLOW_TESTS=1 make test

          # Cleanup
          docker compose down

      - name: Upload coverage reports
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html
