// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: minexus.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandType int32

const (
	CommandType_SYSTEM   CommandType = 0
	CommandType_INTERNAL CommandType = 1
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0: "SYSTEM",
		1: "INTERNAL",
	}
	CommandType_value = map[string]int32{
		"SYSTEM":   0,
		"INTERNAL": 1,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_minexus_proto_enumTypes[0].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_minexus_proto_enumTypes[0]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{0}
}

type HostInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname            string                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip                  string                 `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Os                  string                 `protobuf:"bytes,4,opt,name=os,proto3" json:"os,omitempty"`
	Tags                map[string]string      `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastSeen            int64                  `protobuf:"varint,6,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`                                 // Unix timestamp of last registration/communication
	HardwareFingerprint string                 `protobuf:"bytes,7,opt,name=hardware_fingerprint,json=hardwareFingerprint,proto3" json:"hardware_fingerprint,omitempty"` // Unique hardware identifier
	RegistrationHistory *RegistrationHistory   `protobuf:"bytes,8,opt,name=registration_history,json=registrationHistory,proto3" json:"registration_history,omitempty"`
	ConflictStatus      string                 `protobuf:"bytes,9,opt,name=conflict_status,json=conflictStatus,proto3" json:"conflict_status,omitempty"` // null, "pending", "resolved", "manual_review"
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HostInfo) Reset() {
	*x = HostInfo{}
	mi := &file_minexus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostInfo) ProtoMessage() {}

func (x *HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostInfo.ProtoReflect.Descriptor instead.
func (*HostInfo) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{0}
}

func (x *HostInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HostInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HostInfo) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *HostInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *HostInfo) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *HostInfo) GetHardwareFingerprint() string {
	if x != nil {
		return x.HardwareFingerprint
	}
	return ""
}

func (x *HostInfo) GetRegistrationHistory() *RegistrationHistory {
	if x != nil {
		return x.RegistrationHistory
	}
	return nil
}

func (x *HostInfo) GetConflictStatus() string {
	if x != nil {
		return x.ConflictStatus
	}
	return ""
}

type RegistrationHistory struct {
	state             protoimpl.MessageState              `protogen:"open.v1"`
	Registrations     []*RegistrationHistory_Registration `protobuf:"bytes,1,rep,name=registrations,proto3" json:"registrations,omitempty"`
	Conflicts         []*RegistrationHistory_Conflict     `protobuf:"bytes,2,rep,name=conflicts,proto3" json:"conflicts,omitempty"`
	FirstSeen         int64                               `protobuf:"varint,3,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	RegistrationCount int32                               `protobuf:"varint,4,opt,name=registration_count,json=registrationCount,proto3" json:"registration_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RegistrationHistory) Reset() {
	*x = RegistrationHistory{}
	mi := &file_minexus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationHistory) ProtoMessage() {}

func (x *RegistrationHistory) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationHistory.ProtoReflect.Descriptor instead.
func (*RegistrationHistory) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{1}
}

func (x *RegistrationHistory) GetRegistrations() []*RegistrationHistory_Registration {
	if x != nil {
		return x.Registrations
	}
	return nil
}

func (x *RegistrationHistory) GetConflicts() []*RegistrationHistory_Conflict {
	if x != nil {
		return x.Conflicts
	}
	return nil
}

func (x *RegistrationHistory) GetFirstSeen() int64 {
	if x != nil {
		return x.FirstSeen
	}
	return 0
}

func (x *RegistrationHistory) GetRegistrationCount() int32 {
	if x != nil {
		return x.RegistrationCount
	}
	return 0
}

type Command struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          CommandType            `protobuf:"varint,2,opt,name=type,proto3,enum=minexus.CommandType" json:"type,omitempty"`
	Payload       string                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_minexus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Command) GetType() CommandType {
	if x != nil {
		return x.Type
	}
	return CommandType_SYSTEM
}

func (x *Command) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Command) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CommandResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommandId     string                 `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	MinionId      string                 `protobuf:"bytes,2,opt,name=minion_id,json=minionId,proto3" json:"minion_id,omitempty"`
	ExitCode      int32                  `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Stdout        string                 `protobuf:"bytes,4,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        string                 `protobuf:"bytes,5,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Timestamp     int64                  `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandResult) Reset() {
	*x = CommandResult{}
	mi := &file_minexus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResult) ProtoMessage() {}

func (x *CommandResult) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResult.ProtoReflect.Descriptor instead.
func (*CommandResult) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{3}
}

func (x *CommandResult) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *CommandResult) GetMinionId() string {
	if x != nil {
		return x.MinionId
	}
	return ""
}

func (x *CommandResult) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *CommandResult) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *CommandResult) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *CommandResult) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_minexus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{4}
}

func (x *Ack) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_minexus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{5}
}

type SetTagsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinionId      string                 `protobuf:"bytes,1,opt,name=minion_id,json=minionId,proto3" json:"minion_id,omitempty"`
	Tags          map[string]string      `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTagsRequest) Reset() {
	*x = SetTagsRequest{}
	mi := &file_minexus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTagsRequest) ProtoMessage() {}

func (x *SetTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTagsRequest.ProtoReflect.Descriptor instead.
func (*SetTagsRequest) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{6}
}

func (x *SetTagsRequest) GetMinionId() string {
	if x != nil {
		return x.MinionId
	}
	return ""
}

func (x *SetTagsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateTagsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinionId      string                 `protobuf:"bytes,1,opt,name=minion_id,json=minionId,proto3" json:"minion_id,omitempty"`
	Add           map[string]string      `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RemoveKeys    []string               `protobuf:"bytes,3,rep,name=remove_keys,json=removeKeys,proto3" json:"remove_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTagsRequest) Reset() {
	*x = UpdateTagsRequest{}
	mi := &file_minexus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagsRequest) ProtoMessage() {}

func (x *UpdateTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTagsRequest) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTagsRequest) GetMinionId() string {
	if x != nil {
		return x.MinionId
	}
	return ""
}

func (x *UpdateTagsRequest) GetAdd() map[string]string {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *UpdateTagsRequest) GetRemoveKeys() []string {
	if x != nil {
		return x.RemoveKeys
	}
	return nil
}

type TagList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          []string               `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagList) Reset() {
	*x = TagList{}
	mi := &file_minexus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagList) ProtoMessage() {}

func (x *TagList) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagList.ProtoReflect.Descriptor instead.
func (*TagList) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{8}
}

func (x *TagList) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TagMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Key   string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are valid to be assigned to Condition:
	//
	//	*TagMatch_Equals
	//	*TagMatch_Exists
	//	*TagMatch_NotExists
	Condition     isTagMatch_Condition `protobuf_oneof:"condition"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagMatch) Reset() {
	*x = TagMatch{}
	mi := &file_minexus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMatch) ProtoMessage() {}

func (x *TagMatch) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagMatch.ProtoReflect.Descriptor instead.
func (*TagMatch) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{9}
}

func (x *TagMatch) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TagMatch) GetCondition() isTagMatch_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *TagMatch) GetEquals() string {
	if x != nil {
		if x, ok := x.Condition.(*TagMatch_Equals); ok {
			return x.Equals
		}
	}
	return ""
}

func (x *TagMatch) GetExists() bool {
	if x != nil {
		if x, ok := x.Condition.(*TagMatch_Exists); ok {
			return x.Exists
		}
	}
	return false
}

func (x *TagMatch) GetNotExists() bool {
	if x != nil {
		if x, ok := x.Condition.(*TagMatch_NotExists); ok {
			return x.NotExists
		}
	}
	return false
}

type isTagMatch_Condition interface {
	isTagMatch_Condition()
}

type TagMatch_Equals struct {
	Equals string `protobuf:"bytes,2,opt,name=equals,proto3,oneof"`
}

type TagMatch_Exists struct {
	Exists bool `protobuf:"varint,3,opt,name=exists,proto3,oneof"`
}

type TagMatch_NotExists struct {
	NotExists bool `protobuf:"varint,4,opt,name=not_exists,json=notExists,proto3,oneof"`
}

func (*TagMatch_Equals) isTagMatch_Condition() {}

func (*TagMatch_Exists) isTagMatch_Condition() {}

func (*TagMatch_NotExists) isTagMatch_Condition() {}

type TagSelector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*TagMatch            `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"` // AND logique
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagSelector) Reset() {
	*x = TagSelector{}
	mi := &file_minexus_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagSelector) ProtoMessage() {}

func (x *TagSelector) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagSelector.ProtoReflect.Descriptor instead.
func (*TagSelector) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{10}
}

func (x *TagSelector) GetRules() []*TagMatch {
	if x != nil {
		return x.Rules
	}
	return nil
}

type MinionList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Minions       []*HostInfo            `protobuf:"bytes,1,rep,name=minions,proto3" json:"minions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MinionList) Reset() {
	*x = MinionList{}
	mi := &file_minexus_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MinionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinionList) ProtoMessage() {}

func (x *MinionList) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinionList.ProtoReflect.Descriptor instead.
func (*MinionList) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{11}
}

func (x *MinionList) GetMinions() []*HostInfo {
	if x != nil {
		return x.Minions
	}
	return nil
}

type CommandRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinionIds     []string               `protobuf:"bytes,1,rep,name=minion_ids,json=minionIds,proto3" json:"minion_ids,omitempty"`
	TagSelector   *TagSelector           `protobuf:"bytes,2,opt,name=tag_selector,json=tagSelector,proto3" json:"tag_selector,omitempty"`
	Command       *Command               `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	mi := &file_minexus_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{12}
}

func (x *CommandRequest) GetMinionIds() []string {
	if x != nil {
		return x.MinionIds
	}
	return nil
}

func (x *CommandRequest) GetTagSelector() *TagSelector {
	if x != nil {
		return x.TagSelector
	}
	return nil
}

func (x *CommandRequest) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

type CommandDispatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	CommandId     string                 `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandDispatchResponse) Reset() {
	*x = CommandDispatchResponse{}
	mi := &file_minexus_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandDispatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDispatchResponse) ProtoMessage() {}

func (x *CommandDispatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDispatchResponse.ProtoReflect.Descriptor instead.
func (*CommandDispatchResponse) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{13}
}

func (x *CommandDispatchResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *CommandDispatchResponse) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

type ResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommandId     string                 `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultRequest) Reset() {
	*x = ResultRequest{}
	mi := &file_minexus_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultRequest) ProtoMessage() {}

func (x *ResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultRequest.ProtoReflect.Descriptor instead.
func (*ResultRequest) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{14}
}

func (x *ResultRequest) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

type CommandResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*CommandResult       `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandResults) Reset() {
	*x = CommandResults{}
	mi := &file_minexus_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResults) ProtoMessage() {}

func (x *CommandResults) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResults.ProtoReflect.Descriptor instead.
func (*CommandResults) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{15}
}

func (x *CommandResults) GetResults() []*CommandResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// New message for command status updates
type CommandStatusUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommandId     string                 `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	MinionId      string                 `protobuf:"bytes,2,opt,name=minion_id,json=minionId,proto3" json:"minion_id,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"` // "RECEIVED", "EXECUTING", "COMPLETED", "FAILED"
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandStatusUpdate) Reset() {
	*x = CommandStatusUpdate{}
	mi := &file_minexus_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStatusUpdate) ProtoMessage() {}

func (x *CommandStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStatusUpdate.ProtoReflect.Descriptor instead.
func (*CommandStatusUpdate) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{16}
}

func (x *CommandStatusUpdate) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *CommandStatusUpdate) GetMinionId() string {
	if x != nil {
		return x.MinionId
	}
	return ""
}

func (x *CommandStatusUpdate) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CommandStatusUpdate) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type RegisterResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Success             bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	AssignedId          string                 `protobuf:"bytes,2,opt,name=assigned_id,json=assignedId,proto3" json:"assigned_id,omitempty"`
	ConflictStatus      string                 `protobuf:"bytes,3,opt,name=conflict_status,json=conflictStatus,proto3" json:"conflict_status,omitempty"`
	RegistrationHistory *RegistrationHistory   `protobuf:"bytes,4,opt,name=registration_history,json=registrationHistory,proto3" json:"registration_history,omitempty"`
	ErrorMessage        string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ConflictDetails     map[string]string      `protobuf:"bytes,6,rep,name=conflict_details,json=conflictDetails,proto3" json:"conflict_details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_minexus_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{17}
}

func (x *RegisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterResponse) GetAssignedId() string {
	if x != nil {
		return x.AssignedId
	}
	return ""
}

func (x *RegisterResponse) GetConflictStatus() string {
	if x != nil {
		return x.ConflictStatus
	}
	return ""
}

func (x *RegisterResponse) GetRegistrationHistory() *RegistrationHistory {
	if x != nil {
		return x.RegistrationHistory
	}
	return nil
}

func (x *RegisterResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RegisterResponse) GetConflictDetails() map[string]string {
	if x != nil {
		return x.ConflictDetails
	}
	return nil
}

type MinionInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MinionInfo) Reset() {
	*x = MinionInfo{}
	mi := &file_minexus_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MinionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinionInfo) ProtoMessage() {}

func (x *MinionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinionInfo.ProtoReflect.Descriptor instead.
func (*MinionInfo) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{18}
}

func (x *MinionInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RegistrationHistory_Registration struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Timestamp           int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Id                  string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Ip                  string                 `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Hostname            string                 `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	HardwareFingerprint string                 `protobuf:"bytes,5,opt,name=hardware_fingerprint,json=hardwareFingerprint,proto3" json:"hardware_fingerprint,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RegistrationHistory_Registration) Reset() {
	*x = RegistrationHistory_Registration{}
	mi := &file_minexus_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationHistory_Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationHistory_Registration) ProtoMessage() {}

func (x *RegistrationHistory_Registration) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationHistory_Registration.ProtoReflect.Descriptor instead.
func (*RegistrationHistory_Registration) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RegistrationHistory_Registration) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RegistrationHistory_Registration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegistrationHistory_Registration) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RegistrationHistory_Registration) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegistrationHistory_Registration) GetHardwareFingerprint() string {
	if x != nil {
		return x.HardwareFingerprint
	}
	return ""
}

type RegistrationHistory_Conflict struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`             // "duplicate_id", "duplicate_hostname", "hardware_mismatch"
	Resolution    string                 `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"` // "auto_reassign", "manual", "pending"
	Details       map[string]string      `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistrationHistory_Conflict) Reset() {
	*x = RegistrationHistory_Conflict{}
	mi := &file_minexus_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistrationHistory_Conflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationHistory_Conflict) ProtoMessage() {}

func (x *RegistrationHistory_Conflict) ProtoReflect() protoreflect.Message {
	mi := &file_minexus_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationHistory_Conflict.ProtoReflect.Descriptor instead.
func (*RegistrationHistory_Conflict) Descriptor() ([]byte, []int) {
	return file_minexus_proto_rawDescGZIP(), []int{1, 1}
}

func (x *RegistrationHistory_Conflict) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RegistrationHistory_Conflict) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RegistrationHistory_Conflict) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

func (x *RegistrationHistory_Conflict) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_minexus_proto protoreflect.FileDescriptor

const file_minexus_proto_rawDesc = "" +
	"\n" +
	"\rminexus.proto\x12\aminexus\"\x8a\x03\n" +
	"\bHostInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bhostname\x18\x02 \x01(\tR\bhostname\x12\x0e\n" +
	"\x02ip\x18\x03 \x01(\tR\x02ip\x12\x0e\n" +
	"\x02os\x18\x04 \x01(\tR\x02os\x12/\n" +
	"\x04tags\x18\x05 \x03(\v2\x1b.minexus.HostInfo.TagsEntryR\x04tags\x12\x1b\n" +
	"\tlast_seen\x18\x06 \x01(\x03R\blastSeen\x121\n" +
	"\x14hardware_fingerprint\x18\a \x01(\tR\x13hardwareFingerprint\x12O\n" +
	"\x14registration_history\x18\b \x01(\v2\x1c.minexus.RegistrationHistoryR\x13registrationHistory\x12'\n" +
	"\x0fconflict_status\x18\t \x01(\tR\x0econflictStatus\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x80\x05\n" +
	"\x13RegistrationHistory\x12O\n" +
	"\rregistrations\x18\x01 \x03(\v2).minexus.RegistrationHistory.RegistrationR\rregistrations\x12C\n" +
	"\tconflicts\x18\x02 \x03(\v2%.minexus.RegistrationHistory.ConflictR\tconflicts\x12\x1d\n" +
	"\n" +
	"first_seen\x18\x03 \x01(\x03R\tfirstSeen\x12-\n" +
	"\x12registration_count\x18\x04 \x01(\x05R\x11registrationCount\x1a\x9b\x01\n" +
	"\fRegistration\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x0e\n" +
	"\x02ip\x18\x03 \x01(\tR\x02ip\x12\x1a\n" +
	"\bhostname\x18\x04 \x01(\tR\bhostname\x121\n" +
	"\x14hardware_fingerprint\x18\x05 \x01(\tR\x13hardwareFingerprint\x1a\xe6\x01\n" +
	"\bConflict\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1e\n" +
	"\n" +
	"resolution\x18\x03 \x01(\tR\n" +
	"resolution\x12L\n" +
	"\adetails\x18\x04 \x03(\v22.minexus.RegistrationHistory.Conflict.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd6\x01\n" +
	"\aCommand\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12(\n" +
	"\x04type\x18\x02 \x01(\x0e2\x14.minexus.CommandTypeR\x04type\x12\x18\n" +
	"\apayload\x18\x03 \x01(\tR\apayload\x12:\n" +
	"\bmetadata\x18\x04 \x03(\v2\x1e.minexus.Command.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb6\x01\n" +
	"\rCommandResult\x12\x1d\n" +
	"\n" +
	"command_id\x18\x01 \x01(\tR\tcommandId\x12\x1b\n" +
	"\tminion_id\x18\x02 \x01(\tR\bminionId\x12\x1b\n" +
	"\texit_code\x18\x03 \x01(\x05R\bexitCode\x12\x16\n" +
	"\x06stdout\x18\x04 \x01(\tR\x06stdout\x12\x16\n" +
	"\x06stderr\x18\x05 \x01(\tR\x06stderr\x12\x1c\n" +
	"\ttimestamp\x18\x06 \x01(\x03R\ttimestamp\"\x1f\n" +
	"\x03Ack\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\a\n" +
	"\x05Empty\"\x9d\x01\n" +
	"\x0eSetTagsRequest\x12\x1b\n" +
	"\tminion_id\x18\x01 \x01(\tR\bminionId\x125\n" +
	"\x04tags\x18\x02 \x03(\v2!.minexus.SetTagsRequest.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc0\x01\n" +
	"\x11UpdateTagsRequest\x12\x1b\n" +
	"\tminion_id\x18\x01 \x01(\tR\bminionId\x125\n" +
	"\x03add\x18\x02 \x03(\v2#.minexus.UpdateTagsRequest.AddEntryR\x03add\x12\x1f\n" +
	"\vremove_keys\x18\x03 \x03(\tR\n" +
	"removeKeys\x1a6\n" +
	"\bAddEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x1d\n" +
	"\aTagList\x12\x12\n" +
	"\x04tags\x18\x01 \x03(\tR\x04tags\"~\n" +
	"\bTagMatch\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x18\n" +
	"\x06equals\x18\x02 \x01(\tH\x00R\x06equals\x12\x18\n" +
	"\x06exists\x18\x03 \x01(\bH\x00R\x06exists\x12\x1f\n" +
	"\n" +
	"not_exists\x18\x04 \x01(\bH\x00R\tnotExistsB\v\n" +
	"\tcondition\"6\n" +
	"\vTagSelector\x12'\n" +
	"\x05rules\x18\x01 \x03(\v2\x11.minexus.TagMatchR\x05rules\"9\n" +
	"\n" +
	"MinionList\x12+\n" +
	"\aminions\x18\x01 \x03(\v2\x11.minexus.HostInfoR\aminions\"\x94\x01\n" +
	"\x0eCommandRequest\x12\x1d\n" +
	"\n" +
	"minion_ids\x18\x01 \x03(\tR\tminionIds\x127\n" +
	"\ftag_selector\x18\x02 \x01(\v2\x14.minexus.TagSelectorR\vtagSelector\x12*\n" +
	"\acommand\x18\x03 \x01(\v2\x10.minexus.CommandR\acommand\"T\n" +
	"\x17CommandDispatchResponse\x12\x1a\n" +
	"\baccepted\x18\x01 \x01(\bR\baccepted\x12\x1d\n" +
	"\n" +
	"command_id\x18\x02 \x01(\tR\tcommandId\".\n" +
	"\rResultRequest\x12\x1d\n" +
	"\n" +
	"command_id\x18\x01 \x01(\tR\tcommandId\"B\n" +
	"\x0eCommandResults\x120\n" +
	"\aresults\x18\x01 \x03(\v2\x16.minexus.CommandResultR\aresults\"\x87\x01\n" +
	"\x13CommandStatusUpdate\x12\x1d\n" +
	"\n" +
	"command_id\x18\x01 \x01(\tR\tcommandId\x12\x1b\n" +
	"\tminion_id\x18\x02 \x01(\tR\bminionId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\"\x8b\x03\n" +
	"\x10RegisterResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1f\n" +
	"\vassigned_id\x18\x02 \x01(\tR\n" +
	"assignedId\x12'\n" +
	"\x0fconflict_status\x18\x03 \x01(\tR\x0econflictStatus\x12O\n" +
	"\x14registration_history\x18\x04 \x01(\v2\x1c.minexus.RegistrationHistoryR\x13registrationHistory\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12Y\n" +
	"\x10conflict_details\x18\x06 \x03(\v2..minexus.RegisterResponse.ConflictDetailsEntryR\x0fconflictDetails\x1aB\n" +
	"\x14ConflictDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x1c\n" +
	"\n" +
	"MinionInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id*'\n" +
	"\vCommandType\x12\n" +
	"\n" +
	"\x06SYSTEM\x10\x00\x12\f\n" +
	"\bINTERNAL\x10\x012\xec\x02\n" +
	"\x0eConsoleService\x122\n" +
	"\vListMinions\x12\x0e.minexus.Empty\x1a\x13.minexus.MinionList\x12,\n" +
	"\bListTags\x12\x0e.minexus.Empty\x1a\x10.minexus.TagList\x120\n" +
	"\aSetTags\x12\x17.minexus.SetTagsRequest\x1a\f.minexus.Ack\x126\n" +
	"\n" +
	"UpdateTags\x12\x1a.minexus.UpdateTagsRequest\x1a\f.minexus.Ack\x12H\n" +
	"\vSendCommand\x12\x17.minexus.CommandRequest\x1a .minexus.CommandDispatchResponse\x12D\n" +
	"\x11GetCommandResults\x12\x16.minexus.ResultRequest\x1a\x17.minexus.CommandResults2\xfa\x01\n" +
	"\rMinionService\x128\n" +
	"\bRegister\x12\x11.minexus.HostInfo\x1a\x19.minexus.RegisterResponse\x121\n" +
	"\vGetCommands\x12\x0e.minexus.Empty\x1a\x10.minexus.Command0\x01\x129\n" +
	"\x11SendCommandResult\x12\x16.minexus.CommandResult\x1a\f.minexus.Ack\x12A\n" +
	"\x13UpdateCommandStatus\x12\x1c.minexus.CommandStatusUpdate\x1a\f.minexus.AckB\x15Z\x13minexus/proto;protob\x06proto3"

var (
	file_minexus_proto_rawDescOnce sync.Once
	file_minexus_proto_rawDescData []byte
)

func file_minexus_proto_rawDescGZIP() []byte {
	file_minexus_proto_rawDescOnce.Do(func() {
		file_minexus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_minexus_proto_rawDesc), len(file_minexus_proto_rawDesc)))
	})
	return file_minexus_proto_rawDescData
}

var file_minexus_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_minexus_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_minexus_proto_goTypes = []any{
	(CommandType)(0),                         // 0: minexus.CommandType
	(*HostInfo)(nil),                         // 1: minexus.HostInfo
	(*RegistrationHistory)(nil),              // 2: minexus.RegistrationHistory
	(*Command)(nil),                          // 3: minexus.Command
	(*CommandResult)(nil),                    // 4: minexus.CommandResult
	(*Ack)(nil),                              // 5: minexus.Ack
	(*Empty)(nil),                            // 6: minexus.Empty
	(*SetTagsRequest)(nil),                   // 7: minexus.SetTagsRequest
	(*UpdateTagsRequest)(nil),                // 8: minexus.UpdateTagsRequest
	(*TagList)(nil),                          // 9: minexus.TagList
	(*TagMatch)(nil),                         // 10: minexus.TagMatch
	(*TagSelector)(nil),                      // 11: minexus.TagSelector
	(*MinionList)(nil),                       // 12: minexus.MinionList
	(*CommandRequest)(nil),                   // 13: minexus.CommandRequest
	(*CommandDispatchResponse)(nil),          // 14: minexus.CommandDispatchResponse
	(*ResultRequest)(nil),                    // 15: minexus.ResultRequest
	(*CommandResults)(nil),                   // 16: minexus.CommandResults
	(*CommandStatusUpdate)(nil),              // 17: minexus.CommandStatusUpdate
	(*RegisterResponse)(nil),                 // 18: minexus.RegisterResponse
	(*MinionInfo)(nil),                       // 19: minexus.MinionInfo
	nil,                                      // 20: minexus.HostInfo.TagsEntry
	(*RegistrationHistory_Registration)(nil), // 21: minexus.RegistrationHistory.Registration
	(*RegistrationHistory_Conflict)(nil),     // 22: minexus.RegistrationHistory.Conflict
	nil,                                      // 23: minexus.RegistrationHistory.Conflict.DetailsEntry
	nil,                                      // 24: minexus.Command.MetadataEntry
	nil,                                      // 25: minexus.SetTagsRequest.TagsEntry
	nil,                                      // 26: minexus.UpdateTagsRequest.AddEntry
	nil,                                      // 27: minexus.RegisterResponse.ConflictDetailsEntry
}
var file_minexus_proto_depIdxs = []int32{
	20, // 0: minexus.HostInfo.tags:type_name -> minexus.HostInfo.TagsEntry
	2,  // 1: minexus.HostInfo.registration_history:type_name -> minexus.RegistrationHistory
	21, // 2: minexus.RegistrationHistory.registrations:type_name -> minexus.RegistrationHistory.Registration
	22, // 3: minexus.RegistrationHistory.conflicts:type_name -> minexus.RegistrationHistory.Conflict
	0,  // 4: minexus.Command.type:type_name -> minexus.CommandType
	24, // 5: minexus.Command.metadata:type_name -> minexus.Command.MetadataEntry
	25, // 6: minexus.SetTagsRequest.tags:type_name -> minexus.SetTagsRequest.TagsEntry
	26, // 7: minexus.UpdateTagsRequest.add:type_name -> minexus.UpdateTagsRequest.AddEntry
	10, // 8: minexus.TagSelector.rules:type_name -> minexus.TagMatch
	1,  // 9: minexus.MinionList.minions:type_name -> minexus.HostInfo
	11, // 10: minexus.CommandRequest.tag_selector:type_name -> minexus.TagSelector
	3,  // 11: minexus.CommandRequest.command:type_name -> minexus.Command
	4,  // 12: minexus.CommandResults.results:type_name -> minexus.CommandResult
	2,  // 13: minexus.RegisterResponse.registration_history:type_name -> minexus.RegistrationHistory
	27, // 14: minexus.RegisterResponse.conflict_details:type_name -> minexus.RegisterResponse.ConflictDetailsEntry
	23, // 15: minexus.RegistrationHistory.Conflict.details:type_name -> minexus.RegistrationHistory.Conflict.DetailsEntry
	6,  // 16: minexus.ConsoleService.ListMinions:input_type -> minexus.Empty
	6,  // 17: minexus.ConsoleService.ListTags:input_type -> minexus.Empty
	7,  // 18: minexus.ConsoleService.SetTags:input_type -> minexus.SetTagsRequest
	8,  // 19: minexus.ConsoleService.UpdateTags:input_type -> minexus.UpdateTagsRequest
	13, // 20: minexus.ConsoleService.SendCommand:input_type -> minexus.CommandRequest
	15, // 21: minexus.ConsoleService.GetCommandResults:input_type -> minexus.ResultRequest
	1,  // 22: minexus.MinionService.Register:input_type -> minexus.HostInfo
	6,  // 23: minexus.MinionService.GetCommands:input_type -> minexus.Empty
	4,  // 24: minexus.MinionService.SendCommandResult:input_type -> minexus.CommandResult
	17, // 25: minexus.MinionService.UpdateCommandStatus:input_type -> minexus.CommandStatusUpdate
	12, // 26: minexus.ConsoleService.ListMinions:output_type -> minexus.MinionList
	9,  // 27: minexus.ConsoleService.ListTags:output_type -> minexus.TagList
	5,  // 28: minexus.ConsoleService.SetTags:output_type -> minexus.Ack
	5,  // 29: minexus.ConsoleService.UpdateTags:output_type -> minexus.Ack
	14, // 30: minexus.ConsoleService.SendCommand:output_type -> minexus.CommandDispatchResponse
	16, // 31: minexus.ConsoleService.GetCommandResults:output_type -> minexus.CommandResults
	18, // 32: minexus.MinionService.Register:output_type -> minexus.RegisterResponse
	3,  // 33: minexus.MinionService.GetCommands:output_type -> minexus.Command
	5,  // 34: minexus.MinionService.SendCommandResult:output_type -> minexus.Ack
	5,  // 35: minexus.MinionService.UpdateCommandStatus:output_type -> minexus.Ack
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_minexus_proto_init() }
func file_minexus_proto_init() {
	if File_minexus_proto != nil {
		return
	}
	file_minexus_proto_msgTypes[9].OneofWrappers = []any{
		(*TagMatch_Equals)(nil),
		(*TagMatch_Exists)(nil),
		(*TagMatch_NotExists)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_minexus_proto_rawDesc), len(file_minexus_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_minexus_proto_goTypes,
		DependencyIndexes: file_minexus_proto_depIdxs,
		EnumInfos:         file_minexus_proto_enumTypes,
		MessageInfos:      file_minexus_proto_msgTypes,
	}.Build()
	File_minexus_proto = out.File
	file_minexus_proto_goTypes = nil
	file_minexus_proto_depIdxs = nil
}
