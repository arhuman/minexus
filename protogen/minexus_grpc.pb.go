// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: minexus.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsoleService_ListMinions_FullMethodName       = "/minexus.ConsoleService/ListMinions"
	ConsoleService_ListTags_FullMethodName          = "/minexus.ConsoleService/ListTags"
	ConsoleService_SetTags_FullMethodName           = "/minexus.ConsoleService/SetTags"
	ConsoleService_UpdateTags_FullMethodName        = "/minexus.ConsoleService/UpdateTags"
	ConsoleService_SendCommand_FullMethodName       = "/minexus.ConsoleService/SendCommand"
	ConsoleService_GetCommandResults_FullMethodName = "/minexus.ConsoleService/GetCommandResults"
)

// ConsoleServiceClient is the client API for ConsoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsoleServiceClient interface {
	ListMinions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MinionList, error)
	ListTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TagList, error)
	SetTags(ctx context.Context, in *SetTagsRequest, opts ...grpc.CallOption) (*Ack, error)
	UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*Ack, error)
	SendCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandDispatchResponse, error)
	GetCommandResults(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*CommandResults, error)
}

type consoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsoleServiceClient(cc grpc.ClientConnInterface) ConsoleServiceClient {
	return &consoleServiceClient{cc}
}

func (c *consoleServiceClient) ListMinions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MinionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MinionList)
	err := c.cc.Invoke(ctx, ConsoleService_ListMinions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) ListTags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TagList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagList)
	err := c.cc.Invoke(ctx, ConsoleService_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) SetTags(ctx context.Context, in *SetTagsRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, ConsoleService_SetTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) UpdateTags(ctx context.Context, in *UpdateTagsRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, ConsoleService_UpdateTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) SendCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandDispatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandDispatchResponse)
	err := c.cc.Invoke(ctx, ConsoleService_SendCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) GetCommandResults(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*CommandResults, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResults)
	err := c.cc.Invoke(ctx, ConsoleService_GetCommandResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsoleServiceServer is the server API for ConsoleService service.
// All implementations must embed UnimplementedConsoleServiceServer
// for forward compatibility.
type ConsoleServiceServer interface {
	ListMinions(context.Context, *Empty) (*MinionList, error)
	ListTags(context.Context, *Empty) (*TagList, error)
	SetTags(context.Context, *SetTagsRequest) (*Ack, error)
	UpdateTags(context.Context, *UpdateTagsRequest) (*Ack, error)
	SendCommand(context.Context, *CommandRequest) (*CommandDispatchResponse, error)
	GetCommandResults(context.Context, *ResultRequest) (*CommandResults, error)
	mustEmbedUnimplementedConsoleServiceServer()
}

// UnimplementedConsoleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsoleServiceServer struct{}

func (UnimplementedConsoleServiceServer) ListMinions(context.Context, *Empty) (*MinionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMinions not implemented")
}
func (UnimplementedConsoleServiceServer) ListTags(context.Context, *Empty) (*TagList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedConsoleServiceServer) SetTags(context.Context, *SetTagsRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTags not implemented")
}
func (UnimplementedConsoleServiceServer) UpdateTags(context.Context, *UpdateTagsRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTags not implemented")
}
func (UnimplementedConsoleServiceServer) SendCommand(context.Context, *CommandRequest) (*CommandDispatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedConsoleServiceServer) GetCommandResults(context.Context, *ResultRequest) (*CommandResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommandResults not implemented")
}
func (UnimplementedConsoleServiceServer) mustEmbedUnimplementedConsoleServiceServer() {}
func (UnimplementedConsoleServiceServer) testEmbeddedByValue()                        {}

// UnsafeConsoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsoleServiceServer will
// result in compilation errors.
type UnsafeConsoleServiceServer interface {
	mustEmbedUnimplementedConsoleServiceServer()
}

func RegisterConsoleServiceServer(s grpc.ServiceRegistrar, srv ConsoleServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsoleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsoleService_ServiceDesc, srv)
}

func _ConsoleService_ListMinions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).ListMinions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_ListMinions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).ListMinions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).ListTags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_SetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).SetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_SetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).SetTags(ctx, req.(*SetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_UpdateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).UpdateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_UpdateTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).UpdateTags(ctx, req.(*UpdateTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).SendCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_GetCommandResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).GetCommandResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_GetCommandResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).GetCommandResults(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsoleService_ServiceDesc is the grpc.ServiceDesc for ConsoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minexus.ConsoleService",
	HandlerType: (*ConsoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMinions",
			Handler:    _ConsoleService_ListMinions_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _ConsoleService_ListTags_Handler,
		},
		{
			MethodName: "SetTags",
			Handler:    _ConsoleService_SetTags_Handler,
		},
		{
			MethodName: "UpdateTags",
			Handler:    _ConsoleService_UpdateTags_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _ConsoleService_SendCommand_Handler,
		},
		{
			MethodName: "GetCommandResults",
			Handler:    _ConsoleService_GetCommandResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "minexus.proto",
}

const (
	MinionService_Register_FullMethodName            = "/minexus.MinionService/Register"
	MinionService_GetCommands_FullMethodName         = "/minexus.MinionService/GetCommands"
	MinionService_SendCommandResult_FullMethodName   = "/minexus.MinionService/SendCommandResult"
	MinionService_UpdateCommandStatus_FullMethodName = "/minexus.MinionService/UpdateCommandStatus"
)

// MinionServiceClient is the client API for MinionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinionServiceClient interface {
	Register(ctx context.Context, in *HostInfo, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetCommands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Command], error)
	SendCommandResult(ctx context.Context, in *CommandResult, opts ...grpc.CallOption) (*Ack, error)
	UpdateCommandStatus(ctx context.Context, in *CommandStatusUpdate, opts ...grpc.CallOption) (*Ack, error)
}

type minionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMinionServiceClient(cc grpc.ClientConnInterface) MinionServiceClient {
	return &minionServiceClient{cc}
}

func (c *minionServiceClient) Register(ctx context.Context, in *HostInfo, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, MinionService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionServiceClient) GetCommands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Command], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MinionService_ServiceDesc.Streams[0], MinionService_GetCommands_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Command]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MinionService_GetCommandsClient = grpc.ServerStreamingClient[Command]

func (c *minionServiceClient) SendCommandResult(ctx context.Context, in *CommandResult, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, MinionService_SendCommandResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minionServiceClient) UpdateCommandStatus(ctx context.Context, in *CommandStatusUpdate, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, MinionService_UpdateCommandStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinionServiceServer is the server API for MinionService service.
// All implementations must embed UnimplementedMinionServiceServer
// for forward compatibility.
type MinionServiceServer interface {
	Register(context.Context, *HostInfo) (*RegisterResponse, error)
	GetCommands(*Empty, grpc.ServerStreamingServer[Command]) error
	SendCommandResult(context.Context, *CommandResult) (*Ack, error)
	UpdateCommandStatus(context.Context, *CommandStatusUpdate) (*Ack, error)
	mustEmbedUnimplementedMinionServiceServer()
}

// UnimplementedMinionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMinionServiceServer struct{}

func (UnimplementedMinionServiceServer) Register(context.Context, *HostInfo) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMinionServiceServer) GetCommands(*Empty, grpc.ServerStreamingServer[Command]) error {
	return status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (UnimplementedMinionServiceServer) SendCommandResult(context.Context, *CommandResult) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommandResult not implemented")
}
func (UnimplementedMinionServiceServer) UpdateCommandStatus(context.Context, *CommandStatusUpdate) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommandStatus not implemented")
}
func (UnimplementedMinionServiceServer) mustEmbedUnimplementedMinionServiceServer() {}
func (UnimplementedMinionServiceServer) testEmbeddedByValue()                       {}

// UnsafeMinionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinionServiceServer will
// result in compilation errors.
type UnsafeMinionServiceServer interface {
	mustEmbedUnimplementedMinionServiceServer()
}

func RegisterMinionServiceServer(s grpc.ServiceRegistrar, srv MinionServiceServer) {
	// If the following call pancis, it indicates UnimplementedMinionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MinionService_ServiceDesc, srv)
}

func _MinionService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinionService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServiceServer).Register(ctx, req.(*HostInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinionService_GetCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MinionServiceServer).GetCommands(m, &grpc.GenericServerStream[Empty, Command]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MinionService_GetCommandsServer = grpc.ServerStreamingServer[Command]

func _MinionService_SendCommandResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServiceServer).SendCommandResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinionService_SendCommandResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServiceServer).SendCommandResult(ctx, req.(*CommandResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinionService_UpdateCommandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinionServiceServer).UpdateCommandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinionService_UpdateCommandStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinionServiceServer).UpdateCommandStatus(ctx, req.(*CommandStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// MinionService_ServiceDesc is the grpc.ServiceDesc for MinionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minexus.MinionService",
	HandlerType: (*MinionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _MinionService_Register_Handler,
		},
		{
			MethodName: "SendCommandResult",
			Handler:    _MinionService_SendCommandResult_Handler,
		},
		{
			MethodName: "UpdateCommandStatus",
			Handler:    _MinionService_UpdateCommandStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCommands",
			Handler:       _MinionService_GetCommands_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minexus.proto",
}
